package tree

import "goalgorithms/common"

//二叉树的垂序遍历(leetcode-987)
//给你二叉树的根结点root，请你设计算法计算二叉树的垂序遍历序列。
//对位于(row,col)的每个结点而言，其左右子结点分别位于(row+1,col-1)和(row+1,col+1)。树的根结点位于(0,0)。
//二叉树的垂序遍历从最左边的列开始直到最右边的列结束，按列索引每一列上的所有结点，形成一个按出现位置从上到下排序的有序列表。
//如果同行同列上有多个结点，则按结点的值从小到大进行排序。 返回二叉树的垂序遍历序列。
//示例1：输入：root=[3,9,20,null,null,15,7]输出：[[9],[3,15],[20],[7]]
//解释：
//	列-1：只有结点9在此列中。
//	列0：只有结点3和15在此列中，按从上到下顺序。
//	列1：只有结点20在此列中。
//	列2：只有结点7在此列中。
//示例2：输入：root=[1,2,3,4,5,6,7]输出：[[4],[2],[1,5,6],[3],[7]]
//解释：
//	列-2：只有结点4在此列中。
//	列-1：只有结点2在此列中。
//	列0：结点1、5和6都在此列中。
//	1在上面，所以它出现在前面。
//	5和6位置都是(2,0)，所以按值从小到大排序，5在6的前面。
//	列1：只有结点3在此列中。
//	列2：只有结点7在此列中。
//示例3：输入：root=[1,2,3,4,6,5,7]输出：[[4],[2],[1,5,6],[3],[7]]解释：
//	这个示例实际上与示例2完全相同，只是结点5和6在树中的位置发生了交换。
//	因为5和6的位置仍然相同，所以答案保持不变，仍然按值从小到大排序。
//提示：
//	树中结点数目总数在范围[1,1000]内;
//	0<=Node.val<=1000

func verticalTraversal1(root *common.TreeNode) [][]int {
	return nil
}
