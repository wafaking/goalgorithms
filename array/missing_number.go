package array

//丢失的数字(leetcode-268)
//给定一个包含[0,n]中n个数的数组nums，找出[0,n]这个范围内没有出现在数组中的那个数。
//示例1：输入：nums=[3,0,1]输出：2
//解释：n=3，因为有3个数字，所以所有的数字都在范围[0,3]内。2是丢失的数字，因为它没有出现在nums中。
//示例2：输入：nums=[0,1]输出：2
//解释：n=2，因为有2个数字，所以所有的数字都在范围[0,2]内。2是丢失的数字，因为它没有出现在nums中。
//示例3：输入：nums=[9,6,4,2,3,5,7,0,1]输出：8
//解释：n=9，因为有9个数字，所以所有的数字都在范围[0,9]内。8是丢失的数字，因为它没有出现在nums中。
//示例4：输入：nums=[0]输出：1
//解释：n=1，因为有1个数字，所以所有的数字都在范围[0,1]内。1是丢失的数字，因为它没有出现在nums中。
//提示：
//	n==nums.length
//	1<=n<=104
//	0<=nums[i]<=n
//	nums中的所有数字都独一无二

//进阶：你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题?

// 数学方法
func missingNumber1(nums []int) int {
	var (
		n    = len(nums)
		sum1 = n * (n + 1) / 2
		sum2 int
	)
	for _, v := range nums {
		sum2 += v
	}
	return sum1 - sum2
}

// todo 哈希表
func missingNumber2(nums []int) int {
	return 0
}
