package dynamics

// 打家劫舍IV(leecode-2560)
//沿街有一排连续的房屋。每间房屋内都藏有一定的现金。现在有一位小偷计划从这些房屋中窃取现金。
//由于相邻的房屋装有相互连通的防盗系统，所以小偷不会窃取相邻的房屋。
//小偷的窃取能力定义为他在窃取过程中能从单间房屋中窃取的最大金额。
//给你一个整数数组nums表示每间房屋存放的现金金额。形式上，从左起第i间房屋中放有nums[i]美元。
//另给你一个整数k，表示窃贼将会窃取的最少房屋数。小偷总能窃取至少k间房屋。
//返回小偷的最小窃取能力。

//示例1：输入：nums=[2,3,5,9],k=2,输出：5
//解释：
//小偷窃取至少2间房屋，共有3种方式：
//-窃取下标0和2处的房屋，窃取能力为max(nums[0],nums[2])=5。
//-窃取下标0和3处的房屋，窃取能力为max(nums[0],nums[3])=9。
//-窃取下标1和3处的房屋，窃取能力为max(nums[1],nums[3])=9。
//因此，返回min(5,9,9)=5。
//示例2：输入：nums=[2,7,9,3,1],k=2, 输出：2;
//解释：共有7种窃取方式。窃取能力最小的情况所对应的方式是窃取下标0和4处的房屋。返回max(nums[0],nums[4])=2。

// minCapability TODO
func minCapability(nums []int, k int) int {
	return 0
}
