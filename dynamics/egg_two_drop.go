package dynamics

//鸡蛋掉落-两枚鸡蛋(leetcode-1884)
//给你2枚相同的鸡蛋和一栋从第1层到第n层共有n层楼的建筑。
//已知存在楼层f，满足0<=f<=n，任何从高于f的楼层落下的鸡蛋都会碎，从f楼层或比它低的楼层落下的鸡蛋都不会碎。
//每次你可以取一枚没有碎的鸡蛋并把它从楼层x扔下（1<=x<=n）:
//	1.如果鸡蛋碎了，你就不能再次使用它。
//	2.如果鸡蛋没有摔碎，则可以重复使用。
//请你计算并返回要确定f确切的值的最小操作次数是多少？

//示例1：输入：n=2,输出：2;解释：
//  我们可以将第一枚鸡蛋从1楼扔下，然后将第二枚从2楼扔下。
//	如果第一枚鸡蛋碎了，可知f=0；
//	如果第二枚鸡蛋碎了，但第一枚没碎，可知f=1；
//	否则，当两个鸡蛋都没碎时，可知f=2。

//示例2：输入：n=100,输出：14,解释：
//	一种最优的策略是：
//	-将第一枚鸡蛋从9楼扔下。如果碎了，那么f在0和8之间。将第二枚从1楼扔下，然后每扔一次上一层楼，在8次内找到f。总操作次数=1+8=9。
//	-如果第一枚鸡蛋没有碎，那么再把第一枚鸡蛋从22层扔下。如果碎了，那么f在9和21之间。将第二枚鸡蛋从10楼扔下，然后每扔一次上一层楼，在12次内找到f。总操作次数=2+12=14。
//	-如果第一枚鸡蛋没有再次碎掉，则按照类似的方法从34,45,55,64,72,79,85,90,94,97,99和100楼分别扔下第一枚鸡蛋。
//	不管结果如何，最多需要扔14次来确定f。

// todo
func twoEggDrop(n int) int {
	return 0
}
